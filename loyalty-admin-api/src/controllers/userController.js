const jwt = require('jsonwebtoken');
const { User, Business, UserBusiness, Ranking, Transaction, PointsTransaction } = require('../models');
const { Op } = require('sequelize');

// Generate JWT token
const generateToken = (user) => {
  return jwt.sign(
    { 
      userId: user.id, 
      email: user.email 
    },
    process.env.JWT_SECRET || 'loyalty_app_secret',
    { expiresIn: '30d' }
  );
};

// Register new user (business-independent)
const register = async (req, res) => {
  try {
    const { firstName, lastName, email, password, phoneNumber, dateOfBirth } = req.body;

    // Validate required fields
    if (!firstName || !lastName || !email || !password) {
      return res.status(400).json({
        success: false,
        message: 'First name, last name, email, and password are required'
      });
    }

    // Check if user already exists
    const existingUser = await User.findOne({
      where: { email: email.toLowerCase() }
    });

    if (existingUser) {
      return res.status(409).json({
        success: false,
        message: 'User with this email already exists'
      });
    }

    // Create new user
    const user = await User.create({
      firstName,
      lastName,
      email: email.toLowerCase(),
      password,
      phoneNumber,
      dateOfBirth
    });

    // Generate token
    const token = generateToken(user);

    // Return user data (excluding password)
    const userData = {
      id: user.id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      phoneNumber: user.phoneNumber,
      dateOfBirth: user.dateOfBirth,
      isActive: user.isActive
    };

    res.status(201).json({
      success: true,
      message: 'User registered successfully',
      data: {
        user: userData,
        token
      }
    });

  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error during registration'
    });
  }
};

// Join a business with business code
const joinBusiness = async (req, res) => {
  try {
    const { businessCode } = req.body;
    const userId = req.user.userId;

    console.log('Join business request:', { businessCode, userId });

    if (!businessCode) {
      return res.status(400).json({
        success: false,
        message: 'Business code is required'
      });
    }

    // Find business by business code
    const business = await Business.findOne({ 
      where: { businessCode: businessCode.toUpperCase() } 
    });
    
    console.log('Found business:', business ? business.id : 'Not found');
    
    if (!business) {
      return res.status(404).json({
        success: false,
        message: 'Invalid business code'
      });
    }

    // Check if user is already a member of this business
    const existingMembership = await UserBusiness.findOne({
      where: {
        userId: userId,
        businessId: business.id
      }
    });

    console.log('Existing membership:', existingMembership ? 'Found' : 'None');

    if (existingMembership) {
      return res.status(409).json({
        success: false,
        message: 'You are already a member of this business'
      });
    }

    // Get the lowest ranking for new members
    const initialRanking = await Ranking.findOne({
      where: { businessId: business.id },
      order: [['pointsRequired', 'ASC']]
    });

    console.log('Initial ranking:', initialRanking ? initialRanking.id : 'None');

    // Create membership (memberId and qrCodeData will be auto-generated by model hook)
    console.log('Creating membership with:', { userId, businessId: business.id, currentRankingId: initialRanking ? initialRanking.id : null });
    
    let membership;
    try {
      membership = await UserBusiness.create({
        userId: userId,
        businessId: business.id,
        currentRankingId: initialRanking ? initialRanking.id : null
      });
      console.log('Membership created successfully:', membership.id);
    } catch (createError) {
      console.error('Error creating membership:', createError);
      throw createError;
    }

    // Create welcome bonus points transaction (simplified to avoid transaction issues)
    try {
      if (initialRanking) {
        await PointsTransaction.create({
          userId: userId,
          businessId: business.id,
          type: 'earned',
          points: 100, // Welcome bonus
          description: 'Welcome bonus points',
          referenceType: 'bonus',
          referenceId: 'welcome_bonus',
          balanceBefore: 0,
          balanceAfter: 100
        });

        // Update membership points
        await membership.update({
          totalPoints: 100,
          availablePoints: 100,
          lifetimePoints: 100,
          lastActivity: new Date()
        });
        console.log('Welcome bonus and points updated successfully');
      }
    } catch (pointsError) {
      console.error('Error with welcome bonus (non-fatal):', pointsError);
      // Continue even if bonus points fail - the membership is created
    }

    // Get the membership with related data
    const membershipWithDetails = await UserBusiness.findByPk(membership.id, {
      include: [
        {
          model: Business,
          as: 'business',
          attributes: ['id', 'name', 'businessCode']
        },
        {
          model: Ranking,
          as: 'currentRanking',
          attributes: ['id', 'title', 'level', 'color']
        }
      ]
    });

    res.status(201).json({
      success: true,
      message: 'Successfully joined business',
      data: {
        membership: {
          memberId: membershipWithDetails.memberId,
          joinDate: membershipWithDetails.joinDate,
          totalPoints: membershipWithDetails.totalPoints,
          availablePoints: membershipWithDetails.availablePoints,
          currentRanking: membershipWithDetails.currentRanking,
          business: membershipWithDetails.business,
          qrCodeData: membershipWithDetails.qrCodeData
        }
      }
    });

  } catch (error) {
    console.error('Join business error details:', error);
    console.error('Error stack:', error.stack);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// Login user
const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Validate required fields
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Email and password are required'
      });
    }

    // Find user
    const user = await User.findOne({
      where: { email: email.toLowerCase() }
    });

    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Invalid email or password'
      });
    }

    // Validate password
    const isValidPassword = await user.validatePassword(password);
    if (!isValidPassword) {
      return res.status(401).json({
        success: false,
        message: 'Invalid email or password'
      });
    }

    // Check if user is active
    if (!user.isActive) {
      return res.status(403).json({
        success: false,
        message: 'Account is deactivated. Please contact support.'
      });
    }

    // Update last login
    await user.update({ lastLogin: new Date() });

    // Generate token
    const token = generateToken(user);

    // Get user's business memberships
    const memberships = await user.getBusinessMemberships();

    // Return user data (excluding password)
    const userData = {
      id: user.id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      phoneNumber: user.phoneNumber,
      dateOfBirth: user.dateOfBirth,
      isActive: user.isActive,
      lastLogin: user.lastLogin,
      memberships: memberships.map(membership => ({
        memberId: membership.memberId,
        business: membership.business,
        totalPoints: membership.totalPoints,
        availablePoints: membership.availablePoints,
        currentRanking: membership.currentRanking,
        joinDate: membership.joinDate,
        lastActivity: membership.lastActivity
      }))
    };

    res.json({
      success: true,
      message: 'Login successful',
      data: {
        user: userData,
        token
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error during login'
    });
  }
};

// Get user profile
const getProfile = async (req, res) => {
  try {
    const user = await User.findByPk(req.user.userId, {
      attributes: { exclude: ['password'] }
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // Get user's business memberships
    const memberships = await user.getBusinessMemberships();

    res.json({
      success: true,
      data: {
        user: {
          ...user.toJSON(),
          memberships: memberships.map(membership => ({
            memberId: membership.memberId,
            business: membership.business,
            totalPoints: membership.totalPoints,
            availablePoints: membership.availablePoints,
            currentRanking: membership.currentRanking,
            joinDate: membership.joinDate,
            lastActivity: membership.lastActivity
          }))
        }
      }
    });

  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Admin-only: Get all members of a business
const getBusinessMembers = async (req, res) => {
  try {
    const businessId = req.admin.businessId;
    const { page = 1, limit = 50, search, status } = req.query;
    
    const offset = (page - 1) * limit;
    let whereClause = { businessId };
    let userWhereClause = {};
    
    // Add search filter
    if (search) {
      userWhereClause[Op.or] = [
        { firstName: { [Op.like]: `%${search}%` } },
        { lastName: { [Op.like]: `%${search}%` } },
        { email: { [Op.like]: `%${search}%` } }
      ];
    }
    
    // Add status filter
    if (status && status !== 'all') {
      whereClause.isActive = status === 'active';
    }

    const { count, rows: memberships } = await UserBusiness.findAndCountAll({
      where: whereClause,
      include: [
        {
          model: User,
          as: 'user',
          where: userWhereClause,
          attributes: { exclude: ['password'] }
        },
        {
          model: Ranking,
          as: 'currentRanking',
          attributes: ['id', 'title', 'level', 'color']
        }
      ],
      order: [['created_at', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    const totalPages = Math.ceil(count / limit);

    // Format the response to match the existing admin interface
    const users = memberships.map(membership => ({
      id: membership.user.id,
      memberId: membership.memberId,
      firstName: membership.user.firstName,
      lastName: membership.user.lastName,
      email: membership.user.email,
      phoneNumber: membership.user.phoneNumber,
      dateOfBirth: membership.user.dateOfBirth,
      totalPoints: membership.totalPoints,
      availablePoints: membership.availablePoints,
      lifetimePoints: membership.lifetimePoints,
      currentRankingId: membership.currentRankingId,
      currentRanking: membership.currentRanking,
      joinDate: membership.joinDate,
      lastActivity: membership.lastActivity,
      isActive: membership.isActive,
      preferences: membership.preferences
    }));

    res.json({
      success: true,
      users,
      pagination: {
        currentPage: parseInt(page),
        totalPages,
        totalUsers: count,
        hasNextPage: page < totalPages,
        hasPrevPage: page > 1
      }
    });

  } catch (error) {
    console.error('Get business members error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Admin-only: Get specific user details
const getUserDetails = async (req, res) => {
  try {
    const businessId = req.admin.businessId;
    const { userId } = req.params;

    const membership = await UserBusiness.findOne({
      where: { 
        userId: userId, 
        businessId: businessId 
      },
      include: [
        {
          model: User,
          as: 'user',
          attributes: { exclude: ['password'] }
        },
        {
          model: Ranking,
          as: 'currentRanking',
          attributes: ['id', 'title', 'level', 'color']
        }
      ]
    });

    if (!membership) {
      return res.status(404).json({
        success: false,
        message: 'User not found in this business'
      });
    }

    // Format the response to match the existing admin interface
    const user = {
      id: membership.user.id,
      memberId: membership.memberId,
      firstName: membership.user.firstName,
      lastName: membership.user.lastName,
      email: membership.user.email,
      phoneNumber: membership.user.phoneNumber,
      dateOfBirth: membership.user.dateOfBirth,
      totalPoints: membership.totalPoints,
      availablePoints: membership.availablePoints,
      lifetimePoints: membership.lifetimePoints,
      currentRankingId: membership.currentRankingId,
      currentRanking: membership.currentRanking,
      joinDate: membership.joinDate,
      lastActivity: membership.lastActivity,
      isActive: membership.isActive,
      preferences: membership.preferences
    };

    res.json({
      success: true,
      user: user
    });

  } catch (error) {
    console.error('Get user details error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Admin-only: Update user status
const updateUserStatus = async (req, res) => {
  try {
    const businessId = req.admin.businessId;
    const { userId } = req.params;
    const { isActive } = req.body;

    const membership = await UserBusiness.findOne({
      where: { 
        userId: userId, 
        businessId: businessId 
      },
      include: [{
        model: User,
        as: 'user',
        attributes: ['firstName', 'lastName', 'email']
      }]
    });

    if (!membership) {
      return res.status(404).json({
        success: false,
        message: 'User not found in this business'
      });
    }

    // Update the membership status
    await membership.update({ isActive });

    res.json({
      success: true,
      message: `User ${isActive ? 'activated' : 'deactivated'} successfully`,
      user: {
        id: membership.userId,
        memberId: membership.memberId,
        name: `${membership.user.firstName} ${membership.user.lastName}`,
        isActive: membership.isActive
      }
    });

  } catch (error) {
    console.error('Update user status error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Admin-only: Update user details
const updateUserDetails = async (req, res) => {
  try {
    const businessId = req.admin.businessId;
    const { userId } = req.params;
    const { firstName, lastName, email, phoneNumber, isActive } = req.body;

    const membership = await UserBusiness.findOne({
      where: { 
        userId: userId, 
        businessId: businessId 
      },
      include: [{
        model: User,
        as: 'user',
        attributes: { exclude: ['password'] }
      }]
    });

    if (!membership) {
      return res.status(404).json({
        success: false,
        message: 'User not found in this business'
      });
    }

    // Update user basic details
    const userUpdateData = {};
    if (firstName) userUpdateData.firstName = firstName;
    if (lastName) userUpdateData.lastName = lastName;
    if (email) userUpdateData.email = email.toLowerCase();
    if (phoneNumber) userUpdateData.phoneNumber = phoneNumber;

    if (Object.keys(userUpdateData).length > 0) {
      await membership.user.update(userUpdateData);
    }

    // Update membership status if provided
    if (typeof isActive === 'boolean') {
      await membership.update({ isActive });
    }

    // Get updated data
    await membership.reload({
      include: [{
        model: User,
        as: 'user',
        attributes: { exclude: ['password'] }
      }]
    });

    res.json({
      success: true,
      message: 'User updated successfully',
      user: {
        id: membership.user.id,
        memberId: membership.memberId,
        firstName: membership.user.firstName,
        lastName: membership.user.lastName,
        email: membership.user.email,
        phoneNumber: membership.user.phoneNumber,
        isActive: membership.isActive
      }
    });

  } catch (error) {
    console.error('Update user details error:', error);
    
    if (error.name === 'SequelizeUniqueConstraintError') {
      return res.status(400).json({
        success: false,
        message: 'Email already exists for another user'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Admin-only: Remove user from business
const removeUserFromBusiness = async (req, res) => {
  try {
    const businessId = req.admin.businessId;
    const { userId } = req.params;

    const membership = await UserBusiness.findOne({
      where: { 
        userId: userId, 
        businessId: businessId 
      },
      include: [{
        model: User,
        as: 'user',
        attributes: ['firstName', 'lastName', 'email']
      }]
    });

    if (!membership) {
      return res.status(404).json({
        success: false,
        message: 'User membership not found'
      });
    }

    // Store membership info for response
    const membershipInfo = {
      memberId: membership.memberId,
      user: membership.user
    };

    // Delete the membership (this will cascade to related records)
    await membership.destroy();

    res.json({
      success: true,
      message: 'User removed from business successfully',
      removedMembership: membershipInfo
    });

  } catch (error) {
    console.error('Remove user from business error:', error);
    
    if (error.name === 'SequelizeForeignKeyConstraintError') {
      return res.status(400).json({
        success: false,
        message: 'Cannot remove user due to existing transactions or related records'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Update user profile
const updateProfile = async (req, res) => {
  try {
    const { firstName, lastName, phoneNumber, dateOfBirth, preferences } = req.body;
    const userId = req.user.userId;

    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // Update user fields
    const updateData = {};
    if (firstName) updateData.firstName = firstName;
    if (lastName) updateData.lastName = lastName;
    if (phoneNumber) updateData.phoneNumber = phoneNumber;
    if (dateOfBirth) updateData.dateOfBirth = dateOfBirth;

    await user.update(updateData);

    // Get updated user data with memberships
    const memberships = await user.getBusinessMemberships();

    res.json({
      success: true,
      message: 'Profile updated successfully',
      data: {
        user: {
          ...user.toJSON(),
          memberships: memberships.map(membership => ({
            memberId: membership.memberId,
            business: membership.business,
            totalPoints: membership.totalPoints,
            availablePoints: membership.availablePoints,
            currentRanking: membership.currentRanking,
            joinDate: membership.joinDate,
            lastActivity: membership.lastActivity
          }))
        }
      }
    });

  } catch (error) {
    console.error('Update profile error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Get user's QR code data for a specific business
const getUserQRCode = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { businessId } = req.params;

    const membership = await UserBusiness.findOne({
      where: { 
        userId: userId, 
        businessId: businessId 
      },
      include: [{
        model: Business,
        as: 'business',
        attributes: ['id', 'name', 'businessCode']
      }]
    });

    if (!membership) {
      return res.status(404).json({
        success: false,
        message: 'User is not a member of this business'
      });
    }

    res.json({
      success: true,
      data: {
        qrCodeData: membership.qrCodeData,
        business: membership.business,
        memberId: membership.memberId,
        isActive: membership.isActive
      }
    });

  } catch (error) {
    console.error('Get user QR code error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Get user statistics
const getUserStats = async (req, res) => {
  try {
    const userId = req.user.userId;
    const user = await User.findByPk(userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // Get user's memberships with statistics
    const memberships = await user.getBusinessMemberships();
    
    const stats = {
      totalBusinesses: memberships.length,
      totalPoints: memberships.reduce((sum, m) => sum + m.totalPoints, 0),
      totalLifetimePoints: memberships.reduce((sum, m) => sum + m.lifetimePoints, 0),
      memberships: memberships.map(membership => ({
        businessId: membership.businessId,
        businessName: membership.business.name,
        memberId: membership.memberId,
        totalPoints: membership.totalPoints,
        availablePoints: membership.availablePoints,
        lifetimePoints: membership.lifetimePoints,
        currentRanking: membership.currentRanking,
        joinDate: membership.joinDate,
        lastActivity: membership.lastActivity
      }))
    };

    res.json({
      success: true,
      data: { stats }
    });

  } catch (error) {
    console.error('Get user stats error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error'
    });
  }
};

// Get user business memberships
const getBusinessMemberships = async (req, res) => {
  try {
    const userId = req.user.userId;
    console.log('Getting business memberships for user:', userId);

    // Get all business memberships for this user
    const memberships = await UserBusiness.findAll({
      where: { userId },
      include: [
        {
          model: Business,
          as: 'business',
          attributes: ['id', 'name', 'businessCode', 'description', 'category']
        },
        {
          model: Ranking,
          as: 'currentRanking',
          attributes: ['id', 'title', 'color']
        }
      ],
      order: [['created_at', 'DESC']]
    });

    console.log('Found memberships:', memberships.length);

    // Format the response
    const formattedMemberships = memberships.map(membership => ({
      id: membership.id,
      businessId: membership.businessId,
      businessName: membership.business?.name || 'Unknown Business',
      businessCode: membership.business?.businessCode || '',
      businessDescription: membership.business?.description || '',
      businessCategory: membership.business?.category || '',
      memberId: membership.memberId,
      joinDate: membership.joinDate,
      totalPoints: membership.totalPoints,
      availablePoints: membership.availablePoints,
      lifetimePoints: membership.lifetimePoints,
      currentRanking: membership.currentRanking?.title || 'Member',
      currentRankingColor: membership.currentRanking?.color || '#9CAF88',
      lastActivity: membership.lastActivity,
      isActive: membership.isActive,
      qrCodeData: membership.qrCodeData
    }));

    console.log('Formatted memberships:', formattedMemberships);

    res.json({
      success: true,
      message: 'Business memberships retrieved successfully',
      data: formattedMemberships
    });

  } catch (error) {
    console.error('Get business memberships error details:', error);
    console.error('Error stack:', error.stack);
    res.status(500).json({
      success: false,
      message: 'Internal server error while retrieving business memberships',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

module.exports = {
  register,
  joinBusiness,
  login,
  getProfile,
  updateProfile,
  getUserQRCode,
  getUserStats,
  getBusinessMemberships,
  // Admin functions
  getBusinessMembers,
  getUserDetails,
  updateUserStatus,
  updateUserDetails,
  removeUserFromBusiness
};